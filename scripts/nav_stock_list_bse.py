import urllib
import urllib.parse
import urllib.request
import os
import os.path
from ast import literal_eval
import psycopg2

uri="https://www.bseindia.com/corporates/List_Scrips.aspx"

headers = {
    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8',
    'Content-Type': 'application/x-www-form-urlencoded'
}

formFields = (
    (r'__EVENTTARGET', r'ctl00$ContentPlaceHolder1$lnkDownload'),
    (r'__EVENTARGUMENT', r''),
    (r'__VIEWSTATE',r'/wEPDwUKMTY1OTcwNzY0MQ9kFgJmD2QWAgIDD2QWAgIDD2QWCAILDxAPFgYeDURhdGFUZXh0RmllbGQFCkdST1VQX0NPREUeDkRhdGFWYWx1ZUZpZWxkBQpHUk9VUF9DT0RFHgtfIURhdGFCb3VuZGdkEBUUBlNlbGVjdAJBIAJCIAJFIAJGIAJGQwJHQwJJIAJJRgJJUAJNIAJNVAJQIAJUIAJXIAJYIAJYRAJYVAJaIAJaUBUUBlNlbGVjdAJBIAJCIAJFIAJGIAJGQwJHQwJJIAJJRgJJUAJNIAJNVAJQIAJUIAJXIAJYIAJYRAJYVAJaIAJaUBQrAxRnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2RkAg0PEA8WBh8ABQ1pbmR1c3RyeV9uYW1lHwEFDWluZHVzdHJ5X25hbWUfAmdkEBV+BlNlbGVjdAwyLzMgV2hlZWxlcnMTQWR2ZXJ0aXNpbmcgJiBNZWRpYQlBZXJvc3BhY2UNQWdyb2NoZW1pY2FscwhBaXJsaW5lcwlBbHVtaW5pdW0VQXNzZXQgTWFuYWdlbWVudCBDb3MuFkF1dG8gUGFydHMgJiBFcXVpcG1lbnQcQXV0byBUeXJlcyAmIFJ1YmJlciBQcm9kdWN0cwVCYW5rcw1CaW90ZWNobm9sb2d5B0JQTy9LUE8YQnJld2VyaWVzICYgRGlzdGlsbGVyaWVzF0Jyb2FkY2FzdGluZyAmIENhYmxlIFRWDENhcmJvbiBCbGFjaxdDYXJzICYgVXRpbGl0eSBWZWhpY2xlcxhDZW1lbnQgJiBDZW1lbnQgUHJvZHVjdHMbQ2lnYXJldHRlcyxUb2JhY2NvIFByb2R1Y3RzBENvYWwYQ29tbS5QcmludGluZy9TdGF0aW9uZXJ5HENvbW0uVHJhZGluZyAgJiBEaXN0cmlidXRpb24TQ29tbWVyY2lhbCBWZWhpY2xlcxNDb21tb2RpdHkgQ2hlbWljYWxzEUNvbXB1dGVyIEhhcmR3YXJlGkNvbnN0cnVjdGlvbiAmIEVuZ2luZWVyaW5nFkNvbnN0cnVjdGlvbiBNYXRlcmlhbHMTQ29uc3VsdGluZyBTZXJ2aWNlcxRDb25zdW1lciBFbGVjdHJvbmljcxZDb250YWluZXJzICYgUGFja2FnaW5nBkNvcHBlchhEYXRhIFByb2Nlc3NpbmcgU2VydmljZXMHRGVmZW5jZRFEZXBhcnRtZW50IFN0b3JlcwxEaXN0cmlidXRvcnMLRGl2ZXJzaWZpZWQLRWRpYmxlIE9pbHMJRWR1Y2F0aW9uEkVsZWN0cmljIFV0aWxpdGllcxVFbGVjdHJvbmljIENvbXBvbmVudHMYRXhwbG9yYXRpb24gJiBQcm9kdWN0aW9uC0ZlcnRpbGl6ZXJzEUZpYnJlcyAmIFBsYXN0aWNzGUZpbmFuY2UgKGluY2x1ZGluZyBOQkZDcykWRmluYW5jaWFsIEluc3RpdHV0aW9ucxZGb29kICYgRHJ1Z3MgUmV0YWlsaW5nCEZvb3R3ZWFyD0ZvcmVzdCBQcm9kdWN0cxtGdXJuaXR1cmUsRnVybmlzaGluZyxQYWludHMRR2VuZXJhbCBJbnN1cmFuY2UbR2lmdCBBcnRpY2xlcyxUb3lzICYgQ2FyZHMgFUhlYWx0aGNhcmUgRmFjaWxpdGllcxNIZWFsdGhjYXJlIFNlcnZpY2VzE0hlYWx0aGNhcmUgU3VwcGxpZXMaSGVhdnkgRWxlY3RyaWNhbCBFcXVpcG1lbnQRSG9sZGluZyBDb21wYW5pZXMGSG90ZWxzFEhvdXNlaG9sZCBBcHBsaWFuY2VzEkhvdXNlaG9sZCBQcm9kdWN0cwlIb3VzZXdhcmUQSG91c2luZyBGaW5hbmNlIBBJbmR1c3RyaWFsIEdhc2VzFEluZHVzdHJpYWwgTWFjaGluZXJ5FEludGVncmF0ZWQgT2lsICYgR2FzG0ludGVybmV0ICYgQ2F0YWxvZ3VlIFJldGFpbBxJbnRlcm5ldCBTb2Z0d2FyZSAmIFNlcnZpY2VzFEludmVzdG1lbnQgQ29tcGFuaWVzFUlyb24gJiBTdGVlbCBQcm9kdWN0cxxJcm9uICYgU3RlZWwvSW50ZXJtLlByb2R1Y3RzGElUIENvbnN1bHRpbmcgJiBTb2Z0d2FyZRdJVCBOZXR3b3JraW5nIEVxdWlwbWVudBRJVCBTb2Z0d2FyZSBQcm9kdWN0cxRJVCBUcmFpbmluZyBTZXJ2aWNlcxRKdXRlICYgSnV0ZSBQcm9kdWN0cw5MaWZlIEluc3VyYW5jZRZNYXJpbmUgUG9ydCAmIFNlcnZpY2VzEU1lZGljYWwgRXF1aXBtZW50Bk1pbmluZxhNaXNjLkNvbW1lcmNpYWwgU2VydmljZXMWTW92aWVzICYgRW50ZXJ0YWlubWVudBdOb24tYWxjb2hvbGljIEJldmVyYWdlcxtOb24tRHVyYWJsZSBIb3VzZWhvbGQgUHJvZC4YT2lsIEVxdWlwbWVudCAmIFNlcnZpY2VzHE9pbCBNYXJrZXRpbmcgJiBEaXN0cmlidXRpb24bT3RoZXIgQWdyaWN1bHR1cmFsIFByb2R1Y3RzHE90aGVyIEFwcGFyZWxzICYgQWNjZXNzb3JpZXMZT3RoZXIgRWxlY3QuRXF1aXAuLyBQcm9kLhhPdGhlciBGaW5hbmNpYWwgU2VydmljZXMTT3RoZXIgRm9vZCBQcm9kdWN0cxZPdGhlciBJbmR1c3RyaWFsIEdvb2RzGU90aGVyIEluZHVzdHJpYWwgUHJvZHVjdHMYT3RoZXIgTGVpc3VyZSBGYWNpbGl0aWVzFk90aGVyIExlaXN1cmUgUHJvZHVjdHMYT3RoZXIgTm9uLUZlcnJvdXMgTWV0YWxzFk90aGVyIFRlbGVjb20gU2VydmljZXMOUGFja2FnZWQgRm9vZHMWUGFwZXIgJiBQYXBlciBQcm9kdWN0cxFQZXJzb25hbCBQcm9kdWN0cw5QZXRyb2NoZW1pY2Fscw9QaGFybWFjZXV0aWNhbHMVUGhvdG9ncmFwaGljIFByb2R1Y3RzEFBsYXN0aWMgUHJvZHVjdHMKUHVibGlzaGluZxZSZWFsIEVzdGF0ZSBJbnZlc3RtZW50BlJlYWx0eRpSZWZpbmVyaWVzLyBQZXRyby1Qcm9kdWN0cwtSZXN0YXVyYW50cxBSb2FkcyAmIEhpZ2h3YXlzCFNoaXBwaW5nFFNwLkNvbnN1bWVyIFNlcnZpY2VzE1NwZWNpYWx0eSBDaGVtaWNhbHMQU3BlY2lhbHR5IFJldGFpbBtTdG9yYWdlIE1lZGlhICYgUGVyaXBoZXJhbHMFU3VnYXIWU3VyZmFjZSBUcmFuc3BvcnRhdGlvbgxUZWEgJiBDb2ZmZWUcVGVsZWNvbSAtIEFsdGVybmF0ZSBDYXJyaWVycw5UZWxlY29tIENhYmxlcxFUZWxlY29tIEVxdWlwbWVudBBUZWxlY29tIFNlcnZpY2VzCFRleHRpbGVzGlRyYW5zcG9ydCBSZWxhdGVkIFNlcnZpY2VzGlRyYW5zcG9ydGF0aW9uIC0gTG9naXN0aWNzF1RyYXZlbCBTdXBwb3J0IFNlcnZpY2VzE1V0aWxpdGllczpOb24tRWxlYy4EWmluYxV+BlNlbGVjdAwyLzMgV2hlZWxlcnMTQWR2ZXJ0aXNpbmcgJiBNZWRpYQlBZXJvc3BhY2UNQWdyb2NoZW1pY2FscwhBaXJsaW5lcwlBbHVtaW5pdW0VQXNzZXQgTWFuYWdlbWVudCBDb3MuFkF1dG8gUGFydHMgJiBFcXVpcG1lbnQcQXV0byBUeXJlcyAmIFJ1YmJlciBQcm9kdWN0cwVCYW5rcw1CaW90ZWNobm9sb2d5B0JQTy9LUE8YQnJld2VyaWVzICYgRGlzdGlsbGVyaWVzF0Jyb2FkY2FzdGluZyAmIENhYmxlIFRWDENhcmJvbiBCbGFjaxdDYXJzICYgVXRpbGl0eSBWZWhpY2xlcxhDZW1lbnQgJiBDZW1lbnQgUHJvZHVjdHMbQ2lnYXJldHRlcyxUb2JhY2NvIFByb2R1Y3RzBENvYWwYQ29tbS5QcmludGluZy9TdGF0aW9uZXJ5HENvbW0uVHJhZGluZyAgJiBEaXN0cmlidXRpb24TQ29tbWVyY2lhbCBWZWhpY2xlcxNDb21tb2RpdHkgQ2hlbWljYWxzEUNvbXB1dGVyIEhhcmR3YXJlGkNvbnN0cnVjdGlvbiAmIEVuZ2luZWVyaW5nFkNvbnN0cnVjdGlvbiBNYXRlcmlhbHMTQ29uc3VsdGluZyBTZXJ2aWNlcxRDb25zdW1lciBFbGVjdHJvbmljcxZDb250YWluZXJzICYgUGFja2FnaW5nBkNvcHBlchhEYXRhIFByb2Nlc3NpbmcgU2VydmljZXMHRGVmZW5jZRFEZXBhcnRtZW50IFN0b3JlcwxEaXN0cmlidXRvcnMLRGl2ZXJzaWZpZWQLRWRpYmxlIE9pbHMJRWR1Y2F0aW9uEkVsZWN0cmljIFV0aWxpdGllcxVFbGVjdHJvbmljIENvbXBvbmVudHMYRXhwbG9yYXRpb24gJiBQcm9kdWN0aW9uC0ZlcnRpbGl6ZXJzEUZpYnJlcyAmIFBsYXN0aWNzGUZpbmFuY2UgKGluY2x1ZGluZyBOQkZDcykWRmluYW5jaWFsIEluc3RpdHV0aW9ucxZGb29kICYgRHJ1Z3MgUmV0YWlsaW5nCEZvb3R3ZWFyD0ZvcmVzdCBQcm9kdWN0cxtGdXJuaXR1cmUsRnVybmlzaGluZyxQYWludHMRR2VuZXJhbCBJbnN1cmFuY2UbR2lmdCBBcnRpY2xlcyxUb3lzICYgQ2FyZHMgFUhlYWx0aGNhcmUgRmFjaWxpdGllcxNIZWFsdGhjYXJlIFNlcnZpY2VzE0hlYWx0aGNhcmUgU3VwcGxpZXMaSGVhdnkgRWxlY3RyaWNhbCBFcXVpcG1lbnQRSG9sZGluZyBDb21wYW5pZXMGSG90ZWxzFEhvdXNlaG9sZCBBcHBsaWFuY2VzEkhvdXNlaG9sZCBQcm9kdWN0cwlIb3VzZXdhcmUQSG91c2luZyBGaW5hbmNlIBBJbmR1c3RyaWFsIEdhc2VzFEluZHVzdHJpYWwgTWFjaGluZXJ5FEludGVncmF0ZWQgT2lsICYgR2FzG0ludGVybmV0ICYgQ2F0YWxvZ3VlIFJldGFpbBxJbnRlcm5ldCBTb2Z0d2FyZSAmIFNlcnZpY2VzFEludmVzdG1lbnQgQ29tcGFuaWVzFUlyb24gJiBTdGVlbCBQcm9kdWN0cxxJcm9uICYgU3RlZWwvSW50ZXJtLlByb2R1Y3RzGElUIENvbnN1bHRpbmcgJiBTb2Z0d2FyZRdJVCBOZXR3b3JraW5nIEVxdWlwbWVudBRJVCBTb2Z0d2FyZSBQcm9kdWN0cxRJVCBUcmFpbmluZyBTZXJ2aWNlcxRKdXRlICYgSnV0ZSBQcm9kdWN0cw5MaWZlIEluc3VyYW5jZRZNYXJpbmUgUG9ydCAmIFNlcnZpY2VzEU1lZGljYWwgRXF1aXBtZW50Bk1pbmluZxhNaXNjLkNvbW1lcmNpYWwgU2VydmljZXMWTW92aWVzICYgRW50ZXJ0YWlubWVudBdOb24tYWxjb2hvbGljIEJldmVyYWdlcxtOb24tRHVyYWJsZSBIb3VzZWhvbGQgUHJvZC4YT2lsIEVxdWlwbWVudCAmIFNlcnZpY2VzHE9pbCBNYXJrZXRpbmcgJiBEaXN0cmlidXRpb24bT3RoZXIgQWdyaWN1bHR1cmFsIFByb2R1Y3RzHE90aGVyIEFwcGFyZWxzICYgQWNjZXNzb3JpZXMZT3RoZXIgRWxlY3QuRXF1aXAuLyBQcm9kLhhPdGhlciBGaW5hbmNpYWwgU2VydmljZXMTT3RoZXIgRm9vZCBQcm9kdWN0cxZPdGhlciBJbmR1c3RyaWFsIEdvb2RzGU90aGVyIEluZHVzdHJpYWwgUHJvZHVjdHMYT3RoZXIgTGVpc3VyZSBGYWNpbGl0aWVzFk90aGVyIExlaXN1cmUgUHJvZHVjdHMYT3RoZXIgTm9uLUZlcnJvdXMgTWV0YWxzFk90aGVyIFRlbGVjb20gU2VydmljZXMOUGFja2FnZWQgRm9vZHMWUGFwZXIgJiBQYXBlciBQcm9kdWN0cxFQZXJzb25hbCBQcm9kdWN0cw5QZXRyb2NoZW1pY2Fscw9QaGFybWFjZXV0aWNhbHMVUGhvdG9ncmFwaGljIFByb2R1Y3RzEFBsYXN0aWMgUHJvZHVjdHMKUHVibGlzaGluZxZSZWFsIEVzdGF0ZSBJbnZlc3RtZW50BlJlYWx0eRpSZWZpbmVyaWVzLyBQZXRyby1Qcm9kdWN0cwtSZXN0YXVyYW50cxBSb2FkcyAmIEhpZ2h3YXlzCFNoaXBwaW5nFFNwLkNvbnN1bWVyIFNlcnZpY2VzE1NwZWNpYWx0eSBDaGVtaWNhbHMQU3BlY2lhbHR5IFJldGFpbBtTdG9yYWdlIE1lZGlhICYgUGVyaXBoZXJhbHMFU3VnYXIWU3VyZmFjZSBUcmFuc3BvcnRhdGlvbgxUZWEgJiBDb2ZmZWUcVGVsZWNvbSAtIEFsdGVybmF0ZSBDYXJyaWVycw5UZWxlY29tIENhYmxlcxFUZWxlY29tIEVxdWlwbWVudBBUZWxlY29tIFNlcnZpY2VzCFRleHRpbGVzGlRyYW5zcG9ydCBSZWxhdGVkIFNlcnZpY2VzGlRyYW5zcG9ydGF0aW9uIC0gTG9naXN0aWNzF1RyYXZlbCBTdXBwb3J0IFNlcnZpY2VzE1V0aWxpdGllczpOb24tRWxlYy4EWmluYxQrA35nZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dkZAIRDxYCHgdWaXNpYmxlaGQCEw88KwANAGQYAgUeX19Db250cm9sc1JlcXVpcmVQb3N0QmFja0tleV9fFgEFI2N0bDAwJENvbnRlbnRQbGFjZUhvbGRlcjEkYnRuU3VibWl0BSBjdGwwMCRDb250ZW50UGxhY2VIb2xkZXIxJGd2RGF0YQ9nZJ2Y7xDA2kPt4dBXxYGqqhIuNw29'),
    #(r'__VIEWSTATE', r'/wEPDwUKMTY1OTcwNzY0MQ9kFgJmD2QWAgIDD2QWAgIBD2QWDAIDDw8WAh4HVmlzaWJsZWdkZAILDxAPFgYeDURhdGFUZXh0RmllbGQFCkdST1VQX0NPREUeDkRhdGFWYWx1ZUZpZWxkBQpHUk9VUF9DT0RFHgtfIURhdGFCb3VuZGdkEBUUBlNlbGVjdAJBIAJCIAJFIAJGIAJGQwJHQwJJIAJJRgJJUAJNIAJNVAJQIAJUIAJXIAJYIAJYRAJYVAJaIAJaUBUUBlNlbGVjdAJBIAJCIAJFIAJGIAJGQwJHQwJJIAJJRgJJUAJNIAJNVAJQIAJUIAJXIAJYIAJYRAJYVAJaIAJaUBQrAxRnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2RkAg0PEA8WBh8BBQ1pbmR1c3RyeV9uYW1lHwIFDWluZHVzdHJ5X25hbWUfA2dkEBV/BlNlbGVjdAAMMi8zIFdoZWVsZXJzE0FkdmVydGlzaW5nICYgTWVkaWEJQWVyb3NwYWNlDUFncm9jaGVtaWNhbHMIQWlybGluZXMJQWx1bWluaXVtFUFzc2V0IE1hbmFnZW1lbnQgQ29zLhZBdXRvIFBhcnRzICYgRXF1aXBtZW50HEF1dG8gVHlyZXMgJiBSdWJiZXIgUHJvZHVjdHMFQmFua3MNQmlvdGVjaG5vbG9neQdCUE8vS1BPGEJyZXdlcmllcyAmIERpc3RpbGxlcmllcxdCcm9hZGNhc3RpbmcgJiBDYWJsZSBUVgxDYXJib24gQmxhY2sXQ2FycyAmIFV0aWxpdHkgVmVoaWNsZXMYQ2VtZW50ICYgQ2VtZW50IFByb2R1Y3RzG0NpZ2FyZXR0ZXMsVG9iYWNjbyBQcm9kdWN0cwRDb2FsGENvbW0uUHJpbnRpbmcvU3RhdGlvbmVyeRxDb21tLlRyYWRpbmcgICYgRGlzdHJpYnV0aW9uE0NvbW1lcmNpYWwgVmVoaWNsZXMTQ29tbW9kaXR5IENoZW1pY2FscxFDb21wdXRlciBIYXJkd2FyZRpDb25zdHJ1Y3Rpb24gJiBFbmdpbmVlcmluZxZDb25zdHJ1Y3Rpb24gTWF0ZXJpYWxzE0NvbnN1bHRpbmcgU2VydmljZXMUQ29uc3VtZXIgRWxlY3Ryb25pY3MWQ29udGFpbmVycyAmIFBhY2thZ2luZwZDb3BwZXIYRGF0YSBQcm9jZXNzaW5nIFNlcnZpY2VzB0RlZmVuY2URRGVwYXJ0bWVudCBTdG9yZXMMRGlzdHJpYnV0b3JzC0RpdmVyc2lmaWVkC0VkaWJsZSBPaWxzCUVkdWNhdGlvbhJFbGVjdHJpYyBVdGlsaXRpZXMVRWxlY3Ryb25pYyBDb21wb25lbnRzGEV4cGxvcmF0aW9uICYgUHJvZHVjdGlvbgtGZXJ0aWxpemVycxFGaWJyZXMgJiBQbGFzdGljcxlGaW5hbmNlIChpbmNsdWRpbmcgTkJGQ3MpFkZpbmFuY2lhbCBJbnN0aXR1dGlvbnMWRm9vZCAmIERydWdzIFJldGFpbGluZwhGb290d2Vhcg9Gb3Jlc3QgUHJvZHVjdHMbRnVybml0dXJlLEZ1cm5pc2hpbmcsUGFpbnRzEUdlbmVyYWwgSW5zdXJhbmNlG0dpZnQgQXJ0aWNsZXMsVG95cyAmIENhcmRzIBVIZWFsdGhjYXJlIEZhY2lsaXRpZXMTSGVhbHRoY2FyZSBTZXJ2aWNlcxNIZWFsdGhjYXJlIFN1cHBsaWVzGkhlYXZ5IEVsZWN0cmljYWwgRXF1aXBtZW50EUhvbGRpbmcgQ29tcGFuaWVzBkhvdGVscxRIb3VzZWhvbGQgQXBwbGlhbmNlcxJIb3VzZWhvbGQgUHJvZHVjdHMJSG91c2V3YXJlEEhvdXNpbmcgRmluYW5jZSAQSW5kdXN0cmlhbCBHYXNlcxRJbmR1c3RyaWFsIE1hY2hpbmVyeRRJbnRlZ3JhdGVkIE9pbCAmIEdhcxtJbnRlcm5ldCAmIENhdGFsb2d1ZSBSZXRhaWwcSW50ZXJuZXQgU29mdHdhcmUgJiBTZXJ2aWNlcxRJbnZlc3RtZW50IENvbXBhbmllcxVJcm9uICYgU3RlZWwgUHJvZHVjdHMcSXJvbiAmIFN0ZWVsL0ludGVybS5Qcm9kdWN0cxhJVCBDb25zdWx0aW5nICYgU29mdHdhcmUXSVQgTmV0d29ya2luZyBFcXVpcG1lbnQUSVQgU29mdHdhcmUgUHJvZHVjdHMUSVQgVHJhaW5pbmcgU2VydmljZXMUSnV0ZSAmIEp1dGUgUHJvZHVjdHMOTGlmZSBJbnN1cmFuY2UWTWFyaW5lIFBvcnQgJiBTZXJ2aWNlcxFNZWRpY2FsIEVxdWlwbWVudAZNaW5pbmcYTWlzYy5Db21tZXJjaWFsIFNlcnZpY2VzFk1vdmllcyAmIEVudGVydGFpbm1lbnQXTm9uLWFsY29ob2xpYyBCZXZlcmFnZXMbTm9uLUR1cmFibGUgSG91c2Vob2xkIFByb2QuGE9pbCBFcXVpcG1lbnQgJiBTZXJ2aWNlcxxPaWwgTWFya2V0aW5nICYgRGlzdHJpYnV0aW9uG090aGVyIEFncmljdWx0dXJhbCBQcm9kdWN0cxxPdGhlciBBcHBhcmVscyAmIEFjY2Vzc29yaWVzGU90aGVyIEVsZWN0LkVxdWlwLi8gUHJvZC4YT3RoZXIgRmluYW5jaWFsIFNlcnZpY2VzE090aGVyIEZvb2QgUHJvZHVjdHMWT3RoZXIgSW5kdXN0cmlhbCBHb29kcxlPdGhlciBJbmR1c3RyaWFsIFByb2R1Y3RzGE90aGVyIExlaXN1cmUgRmFjaWxpdGllcxZPdGhlciBMZWlzdXJlIFByb2R1Y3RzGE90aGVyIE5vbi1GZXJyb3VzIE1ldGFscxZPdGhlciBUZWxlY29tIFNlcnZpY2VzDlBhY2thZ2VkIEZvb2RzFlBhcGVyICYgUGFwZXIgUHJvZHVjdHMRUGVyc29uYWwgUHJvZHVjdHMOUGV0cm9jaGVtaWNhbHMPUGhhcm1hY2V1dGljYWxzFVBob3RvZ3JhcGhpYyBQcm9kdWN0cxBQbGFzdGljIFByb2R1Y3RzClB1Ymxpc2hpbmcWUmVhbCBFc3RhdGUgSW52ZXN0bWVudAZSZWFsdHkaUmVmaW5lcmllcy8gUGV0cm8tUHJvZHVjdHMLUmVzdGF1cmFudHMQUm9hZHMgJiBIaWdod2F5cwhTaGlwcGluZxRTcC5Db25zdW1lciBTZXJ2aWNlcxNTcGVjaWFsdHkgQ2hlbWljYWxzEFNwZWNpYWx0eSBSZXRhaWwbU3RvcmFnZSBNZWRpYSAmIFBlcmlwaGVyYWxzBVN1Z2FyFlN1cmZhY2UgVHJhbnNwb3J0YXRpb24MVGVhICYgQ29mZmVlHFRlbGVjb20gLSBBbHRlcm5hdGUgQ2FycmllcnMOVGVsZWNvbSBDYWJsZXMRVGVsZWNvbSBFcXVpcG1lbnQQVGVsZWNvbSBTZXJ2aWNlcwhUZXh0aWxlcxpUcmFuc3BvcnQgUmVsYXRlZCBTZXJ2aWNlcxpUcmFuc3BvcnRhdGlvbiAtIExvZ2lzdGljcxdUcmF2ZWwgU3VwcG9ydCBTZXJ2aWNlcxNVdGlsaXRpZXM6Tm9uLUVsZWMuBFppbmMVfwZTZWxlY3QADDIvMyBXaGVlbGVycxNBZHZlcnRpc2luZyAmIE1lZGlhCUFlcm9zcGFjZQ1BZ3JvY2hlbWljYWxzCEFpcmxpbmVzCUFsdW1pbml1bRVBc3NldCBNYW5hZ2VtZW50IENvcy4WQXV0byBQYXJ0cyAmIEVxdWlwbWVudBxBdXRvIFR5cmVzICYgUnViYmVyIFByb2R1Y3RzBUJhbmtzDUJpb3RlY2hub2xvZ3kHQlBPL0tQTxhCcmV3ZXJpZXMgJiBEaXN0aWxsZXJpZXMXQnJvYWRjYXN0aW5nICYgQ2FibGUgVFYMQ2FyYm9uIEJsYWNrF0NhcnMgJiBVdGlsaXR5IFZlaGljbGVzGENlbWVudCAmIENlbWVudCBQcm9kdWN0cxtDaWdhcmV0dGVzLFRvYmFjY28gUHJvZHVjdHMEQ29hbBhDb21tLlByaW50aW5nL1N0YXRpb25lcnkcQ29tbS5UcmFkaW5nICAmIERpc3RyaWJ1dGlvbhNDb21tZXJjaWFsIFZlaGljbGVzE0NvbW1vZGl0eSBDaGVtaWNhbHMRQ29tcHV0ZXIgSGFyZHdhcmUaQ29uc3RydWN0aW9uICYgRW5naW5lZXJpbmcWQ29uc3RydWN0aW9uIE1hdGVyaWFscxNDb25zdWx0aW5nIFNlcnZpY2VzFENvbnN1bWVyIEVsZWN0cm9uaWNzFkNvbnRhaW5lcnMgJiBQYWNrYWdpbmcGQ29wcGVyGERhdGEgUHJvY2Vzc2luZyBTZXJ2aWNlcwdEZWZlbmNlEURlcGFydG1lbnQgU3RvcmVzDERpc3RyaWJ1dG9ycwtEaXZlcnNpZmllZAtFZGlibGUgT2lscwlFZHVjYXRpb24SRWxlY3RyaWMgVXRpbGl0aWVzFUVsZWN0cm9uaWMgQ29tcG9uZW50cxhFeHBsb3JhdGlvbiAmIFByb2R1Y3Rpb24LRmVydGlsaXplcnMRRmlicmVzICYgUGxhc3RpY3MZRmluYW5jZSAoaW5jbHVkaW5nIE5CRkNzKRZGaW5hbmNpYWwgSW5zdGl0dXRpb25zFkZvb2QgJiBEcnVncyBSZXRhaWxpbmcIRm9vdHdlYXIPRm9yZXN0IFByb2R1Y3RzG0Z1cm5pdHVyZSxGdXJuaXNoaW5nLFBhaW50cxFHZW5lcmFsIEluc3VyYW5jZRtHaWZ0IEFydGljbGVzLFRveXMgJiBDYXJkcyAVSGVhbHRoY2FyZSBGYWNpbGl0aWVzE0hlYWx0aGNhcmUgU2VydmljZXMTSGVhbHRoY2FyZSBTdXBwbGllcxpIZWF2eSBFbGVjdHJpY2FsIEVxdWlwbWVudBFIb2xkaW5nIENvbXBhbmllcwZIb3RlbHMUSG91c2Vob2xkIEFwcGxpYW5jZXMSSG91c2Vob2xkIFByb2R1Y3RzCUhvdXNld2FyZRBIb3VzaW5nIEZpbmFuY2UgEEluZHVzdHJpYWwgR2FzZXMUSW5kdXN0cmlhbCBNYWNoaW5lcnkUSW50ZWdyYXRlZCBPaWwgJiBHYXMbSW50ZXJuZXQgJiBDYXRhbG9ndWUgUmV0YWlsHEludGVybmV0IFNvZnR3YXJlICYgU2VydmljZXMUSW52ZXN0bWVudCBDb21wYW5pZXMVSXJvbiAmIFN0ZWVsIFByb2R1Y3RzHElyb24gJiBTdGVlbC9JbnRlcm0uUHJvZHVjdHMYSVQgQ29uc3VsdGluZyAmIFNvZnR3YXJlF0lUIE5ldHdvcmtpbmcgRXF1aXBtZW50FElUIFNvZnR3YXJlIFByb2R1Y3RzFElUIFRyYWluaW5nIFNlcnZpY2VzFEp1dGUgJiBKdXRlIFByb2R1Y3RzDkxpZmUgSW5zdXJhbmNlFk1hcmluZSBQb3J0ICYgU2VydmljZXMRTWVkaWNhbCBFcXVpcG1lbnQGTWluaW5nGE1pc2MuQ29tbWVyY2lhbCBTZXJ2aWNlcxZNb3ZpZXMgJiBFbnRlcnRhaW5tZW50F05vbi1hbGNvaG9saWMgQmV2ZXJhZ2VzG05vbi1EdXJhYmxlIEhvdXNlaG9sZCBQcm9kLhhPaWwgRXF1aXBtZW50ICYgU2VydmljZXMcT2lsIE1hcmtldGluZyAmIERpc3RyaWJ1dGlvbhtPdGhlciBBZ3JpY3VsdHVyYWwgUHJvZHVjdHMcT3RoZXIgQXBwYXJlbHMgJiBBY2Nlc3NvcmllcxlPdGhlciBFbGVjdC5FcXVpcC4vIFByb2QuGE90aGVyIEZpbmFuY2lhbCBTZXJ2aWNlcxNPdGhlciBGb29kIFByb2R1Y3RzFk90aGVyIEluZHVzdHJpYWwgR29vZHMZT3RoZXIgSW5kdXN0cmlhbCBQcm9kdWN0cxhPdGhlciBMZWlzdXJlIEZhY2lsaXRpZXMWT3RoZXIgTGVpc3VyZSBQcm9kdWN0cxhPdGhlciBOb24tRmVycm91cyBNZXRhbHMWT3RoZXIgVGVsZWNvbSBTZXJ2aWNlcw5QYWNrYWdlZCBGb29kcxZQYXBlciAmIFBhcGVyIFByb2R1Y3RzEVBlcnNvbmFsIFByb2R1Y3RzDlBldHJvY2hlbWljYWxzD1BoYXJtYWNldXRpY2FscxVQaG90b2dyYXBoaWMgUHJvZHVjdHMQUGxhc3RpYyBQcm9kdWN0cwpQdWJsaXNoaW5nFlJlYWwgRXN0YXRlIEludmVzdG1lbnQGUmVhbHR5GlJlZmluZXJpZXMvIFBldHJvLVByb2R1Y3RzC1Jlc3RhdXJhbnRzEFJvYWRzICYgSGlnaHdheXMIU2hpcHBpbmcUU3AuQ29uc3VtZXIgU2VydmljZXMTU3BlY2lhbHR5IENoZW1pY2FscxBTcGVjaWFsdHkgUmV0YWlsG1N0b3JhZ2UgTWVkaWEgJiBQZXJpcGhlcmFscwVTdWdhchZTdXJmYWNlIFRyYW5zcG9ydGF0aW9uDFRlYSAmIENvZmZlZRxUZWxlY29tIC0gQWx0ZXJuYXRlIENhcnJpZXJzDlRlbGVjb20gQ2FibGVzEVRlbGVjb20gRXF1aXBtZW50EFRlbGVjb20gU2VydmljZXMIVGV4dGlsZXMaVHJhbnNwb3J0IFJlbGF0ZWQgU2VydmljZXMaVHJhbnNwb3J0YXRpb24gLSBMb2dpc3RpY3MXVHJhdmVsIFN1cHBvcnQgU2VydmljZXMTVXRpbGl0aWVzOk5vbi1FbGVjLgRaaW5jFCsDf2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dnZ2dkZAIRDxYCHwBnZAITDzwrAA0BAA8WBB8DZx4LXyFJdGVtQ291bnQCtz9kFgJmD2QWNAICD2QWEmYPZBYCZg8PFgQeBFRleHQFBjUwMDAwMh4LTmF2aWdhdGVVcmwFSGh0dHBzOi8vd3d3LmJzZWluZGlhLmNvbS9zdG9jay1zaGFyZS1wcmljZS9hYmItaW5kaWEtbGltaXRlZC9hYmIvNTAwMDAyL2RkAgEPDxYCHwUFA0FCQmRkAgIPDxYCHwUFEUFCQiBJbmRpYSBMaW1pdGVkZGQCAw8PFgIfBQUGQWN0aXZlZGQCBA8PFgIfBQUCQSBkZAIFDw8WAh8FBQQyLjAwZGQCBg8PFgIfBQUMSU5FMTE3QTAxMDIyZGQCBw8PFgIfBQUaSGVhdnkgRWxlY3RyaWNhbCBFcXVpcG1lbnRkZAIIDw8WAh8FBQZFcXVpdHlkZAIDD2QWEmYPZBYCZg8PFgQfBQUGNTAwMDAzHwYFT2h0dHBzOi8vd3d3LmJzZWluZGlhLmNvbS9zdG9jay1zaGFyZS1wcmljZS9hZWdpcy1sb2dpc3RpY3MtbHRkL2FlZ2lzbG9nLzUwMDAwMy9kZAIBDw8WAh8FBQhBRUdJU0xPR2RkAgIPDxYCHwUFFEFFR0lTIExPR0lTVElDUyBMVEQuZGQCAw8PFgIfBQUGQWN0aXZlZGQCBA8PFgIfBQUCQSBkZAIFDw8WAh8FBQQxLjAwZGQCBg8PFgIfBQUMSU5FMjA4QzAxMDI1ZGQCBw8PFgIfBQUgT2lsIE1hcmtldGluZyAmYW1wOyBEaXN0cmlidXRpb25kZAIIDw8WAh8FBQZFcXVpdHlkZAIED2QWEmYPZBYCZg8PFgQfBQUGNTAwMDA0HwYFTmh0dHBzOi8vd3d3LmJzZWluZGlhLmNvbS9zdG9jay1zaGFyZS1wcmljZS90b3JyZW50LXBvd2VyLWFlYy1sdGQvdHBhZWMvNTAwMDA0L2RkAgEPDxYCHwUFBVRQQUVDZGQCAg8PFgIfBQUWVE9SUkVOVCBQT1dFUiBBRUMgTFRELmRkAgMPDxYCHwUFCERlbGlzdGVkZGQCBA8PFgIfBQUCQiBkZAIFDw8WAh8FBQUxMC4wMGRkAgYPDxYCHwUFDElORTQyNEEwMTAxNGRkAgcPDxYCHwUFBiZuYnNwO2RkAggPDxYCHwUFBkVxdWl0eWRkAgUPZBYSZg9kFgJmDw8WBB8FBQY1MDAwMDUfBgVQaHR0cHM6Ly93d3cuYnNlaW5kaWEuY29tL3N0b2NrLXNoYXJlLXByaWNlL2FrYXItbGFtaW5hdG9ycy1sdGQvYWthcmxhbWluLzUwMDAwNS9kZAIBDw8WAh8FBQlBS0FSTEFNSU5kZAICDw8WAh8FBRRBS0FSIExBTUlOQVRPUlMgTFRELmRkAgMPDxYCHwUFCERlbGlzdGVkZGQCBA8PFgIfBQUCWERkZAIFDw8WAh8FBQUxMC4wMGRkAgYPDxYCHwUFDElORTk4NEMwMTAxM2RkAgcPDxYCHwUFGUlyb24gJmFtcDsgU3RlZWwgUHJvZHVjdHNkZAIIDw8WAh8FBQZFcXVpdHlkZAIGD2QWEmYPZBYCZg8PFgQfBQUGNTAwMDA2HwYFT2h0dHBzOi8vd3d3LmJzZWluZGlhLmNvbS9zdG9jay1zaGFyZS1wcmljZS9hbHBoYS1kcnVnLWluZGlhLWx0ZC9hbHBoYWRyLzUwMDAwNi9kZAIBDw8WAh8FBQdBTFBIQURSZGQCAg8PFgIfBQUVQUxQSEEgRFJVRyBJTkRJQSBMVEQuZGQCAw8PFgIfBQUIRGVsaXN0ZWRkZAIEDw8WAh8FBQJCIGRkAgUPDxYCHwUFBTEwLjAwZGQCBg8PFgIfBQUMSU5FMjU2QjAxMDI2ZGQCBw8PFgIfBQUGJm5ic3A7ZGQCCA8PFgIfBQUGRXF1aXR5ZGQCBw9kFhJmD2QWAmYPDxYEHwUFBjUwMDAwOB8GBVZodHRwczovL3d3dy5ic2VpbmRpYS5jb20vc3RvY2stc2hhcmUtcHJpY2UvYW1hcmEtcmFqYS1iYXR0ZXJpZXMtbHRkL2FtYXJhamFiYXQvNTAwMDA4L2RkAgEPDxYCHwUFCkFNQVJBSkFCQVRkZAICDw8WAh8FBRlBTUFSQSBSQUpBIEJBVFRFUklFUyBMVEQuZGQCAw8PFgIfBQUGQWN0aXZlZGQCBA8PFgIfBQUCQSBkZAIFDw8WAh8FBQQxLjAwZGQCBg8PFgIfBQUMSU5FODg1QTAxMDMyZGQCBw8PFgIfBQUaQXV0byBQYXJ0cyAmYW1wOyBFcXVpcG1lbnRkZAIIDw8WAh8FBQZFcXVpdHlkZAIID2QWEmYPZBYCZg8PFgQfBQUGNTAwMDA5HwYFXWh0dHBzOi8vd3d3LmJzZWluZGlhLmNvbS9zdG9jay1zaGFyZS1wcmljZS9hbWJhbGFsLXNhcmFiaGFpLWVudGVycHJpc2VzLWx0ZC9hbWJhbGFsc2EvNTAwMDA5L2RkAgEPDxYCHwUFCUFNQkFMQUxTQWRkAgIPDxYCHwUFIUFNQkFMQUwgU0FSQUJIQUkgRU5URVJQUklTRVMgTFRELmRkAgMPDxYCHwUFBkFjdGl2ZWRkAgQPDxYCHwUFAlhUZGQCBQ8PFgIfBQUFMTAuMDBkZAIGDw8WAh8FBQxJTkU0MzJBMDEwMTdkZAIHDw8WAh8FBQ9QaGFybWFjZXV0aWNhbHNkZAIIDw8WAh8FBQZFcXVpdHlkZAIJD2QWEmYPZBYCZg8PFgQfBQUGNTAwMDEwHwYFW2h0dHBzOi8vd3d3LmJzZWluZGlhLmNvbS9zdG9jay1zaGFyZS1wcmljZS9ob3VzaW5nLWRldmVsb3BtZW50LWZpbmFuY2UtY29ycGx0ZC9oZGZjLzUwMDAxMC9kZAIBDw8WAh8FBQRIREZDZGQCAg8PFgIfBQUlSE9VU0lORyBERVZFTE9QTUVOVCBGSU5BTkNFIENPUlAuTFRELmRkAgMPDxYCHwUFBkFjdGl2ZWRkAgQPDxYCHwUFAkEgZGQCBQ8PFgIfBQUEMi4wMGRkAgYPDxYCHwUFDElORTAwMUEwMTAzNmRkAgcPDxYCHwUFEEhvdXNpbmcgRmluYW5jZSBkZAIIDw8WAh8FBQZFcXVpdHlkZAIKD2QWEmYPZBYCZg8PFgQfBQUGNTAwMDExHwYFU2h0dHBzOi8vd3d3LmJzZWluZGlhLmNvbS9zdG9jay1zaGFyZS1wcmljZS9hbXJ1dC1pbmR1c3RyaWVzLWx0ZC9hbXJ0bWlsLWJkbS81MDAwMTEvZGQCAQ8PFgIfBQULQU1SVE1JTC1CRE1kZAICDw8WAh8FBRVBTVJVVCBJTkRVU1RSSUVTIExURC5kZAIDDw8WAh8FBQhEZWxpc3RlZGRkAgQPDxYCHwUFAlogZGQCBQ8PFgIfBQUFMTAuMDBkZAIGDw8WAh8FBQxOQSAgICAgICAgICBkZAIHDw8WAh8FBQYmbmJzcDtkZAIIDw8WAh8FBQZFcXVpdHlkZAILD2QWEmYPZBYCZg8PFgQfBQUGNTAwMDEyHwYFVmh0dHBzOi8vd3d3LmJzZWluZGlhLmNvbS9zdG9jay1zaGFyZS1wcmljZS9hbmRocmEtcGV0cm9jaGVtaWNhbHMtbHRkL2FuZGhyYXBldC81MDAwMTIvZGQCAQ8PFgIfBQUJQU5ESFJBUEVUZGQCAg8PFgIfBQUaQU5ESFJBIFBFVFJPQ0hFTUlDQUxTIExURC5kZAIDDw8WAh8FBQZBY3RpdmVkZAIEDw8WAh8FBQJYIGRkAgUPDxYCHwUFBTEwLjAwZGQCBg8PFgIfBQUMSU5FNzE0QjAxMDE2ZGQCBw8PFgIfBQUTQ29tbW9kaXR5IENoZW1pY2Fsc2RkAggPDxYCHwUFBkVxdWl0eWRkAgwPZBYSZg9kFgJmDw8WBB8FBQY1MDAwMTMfBgVgaHR0cHM6Ly93d3cuYnNlaW5kaWEuY29tL3N0b2NrLXNoYXJlLXByaWNlL2Fuc2FsLXByb3BlcnRpZXMtLWluZnJhc3RydWN0dXJlLWx0ZC9hbnNhbGFwaS81MDAwMTMvZGQCAQ8PFgIfBQUIQU5TQUxBUElkZAICDw8WAh8FBSpBTlNBTCBQUk9QRVJUSUVTICZhbXA7IElORlJBU1RSVUNUVVJFIExURC5kZAIDDw8WAh8FBQZBY3RpdmVkZAIEDw8WAh8FBQJCIGRkAgUPDxYCHwUFBDUuMDBkZAIGDw8WAh8FBQxJTkU0MzZBMDEwMjZkZAIHDw8WAh8FBQZSZWFsdHlkZAIIDw8WAh8FBQZFcXVpdHlkZAIND2QWEmYPZBYCZg8PFgQfBQUGNTAwMDE0HwYFTWh0dHBzOi8vd3d3LmJzZWluZGlhLmNvbS9zdG9jay1zaGFyZS1wcmljZS9hcHBsZS1maW5hbmNlLWx0ZC9hcHBsZWZpbi81MDAwMTQvZGQCAQ8PFgIfBQUIQVBQTEVGSU5kZAICDw8WAh8FBRJBUFBMRSBGSU5BTkNFIExURC5kZAIDDw8WAh8FBQZBY3RpdmVkZAIEDw8WAh8FBQJYVGRkAgUPDxYCHwUFBTEwLjAwZGQCBg8PFgIfBQUMSU5FMDk2QTAxMDEwZGQCBw8PFgIfBQUZRmluYW5jZSAoaW5jbHVkaW5nIE5CRkNzKWRkAggPDxYCHwUFBkVxdWl0eWRkAg4PZBYSZg9kFgJmDw8WBB8FBQY1MDAwMTUfBgVEaHR0cHM6Ly93d3cuYnNlaW5kaWEuY29tL3N0b2NrLXNoYXJlLXByaWNlL2ljaWNpLWx0ZC9pY2ljaWRtLzUwMDAxNS9kZAIBDw8WAh8FBQdJQ0lDSURNZGQCAg8PFgIfBQUKSUNJQ0kgTFRELmRkAgMPDxYCHwUFCERlbGlzdGVkZGQCBA8PFgIfBQUCQiBkZAIFDw8WAh8FBQUxMC4wMGRkAgYPDxYCHwUFDElORTAwNUEwMTAxMWRkAgcPDxYCHwUFBiZuYnNwO2RkAggPDxYCHwUFBkVxdWl0eWRkAg8PZBYSZg9kFgJmDw8WBB8FBQY1MDAwMTYfBgVNaHR0cHM6Ly93d3cuYnNlaW5kaWEuY29tL3N0b2NrLXNoYXJlLXByaWNlL2FydW5hLWhvdGVscy1sdGQvYXJ1bmFodGVsLzUwMDAxNi9kZAIBDw8WAh8FBQlBUlVOQUhURUxkZAICDw8WAh8FBRFBUlVOQSBIT1RFTFMgTFRELmRkAgMPDxYCHwUFBkFjdGl2ZWRkAgQPDxYCHwUFAlhUZGQCBQ8PFgIfBQUFMTAuMDBkZAIGDw8WAh8FBQxJTkU5NTdDMDEwMTlkZAIHDw8WAh8FBQZIb3RlbHNkZAIIDw8WAh8FBQZFcXVpdHlkZAIQD2QWEmYPZBYCZg8PFgQfBQUGNTAwMDE4HwYFPGh0dHBzOi8vd3d3LmJzZWluZGlhLmNvbS9zdG9jay1zaGFyZS1wcmljZS8tL2FycG9sZG0vNTAwMDE4L2RkAgEPDxYCHwUFB0FSUE9MRE1kZAICDw8WAh8FBQdBUlBPTERNZGQCAw8PFgIfBQUIRGVsaXN0ZWRkZAIEDw8WAh8FBQJCIGRkAgUPDxYCHwUFBTEwLjAwZGQCBg8PFgIfBQUMSU5FMDM1QTAxMDE4ZGQCBw8PFgIfBQUGJm5ic3A7ZGQCCA8PFgIfBQUGRXF1aXR5ZGQCEQ9kFhJmD2QWAmYPDxYEHwUFBjUwMDAxOR8GBUxodHRwczovL3d3dy5ic2VpbmRpYS5jb20vc3RvY2stc2hhcmUtcHJpY2UvYmFuay1vZi1yYWphc3RoYW4tbHRkL2Jvci81MDAwMTkvZGQCAQ8PFgIfBQUDQk9SZGQCAg8PFgIfBQUWQkFOSyBPRiBSQUpBU1RIQU4gTFRELmRkAgMPDxYCHwUFCERlbGlzdGVkZGQCBA8PFgIfBQUCQiBk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b20vc3RvY2stc2hhcmUtcHJpY2UvYXR1bC1sdGQvYXR1bC81MDAwMjcvZGQCAQ8PFgIfBQUEQVRVTGRkAgIPDxYCHwUFCUFUVUwgTFRELmRkAgMPDxYCHwUFBkFjdGl2ZWRkAgQPDxYCHwUFAkEgZGQCBQ8PFgIfBQUFMTAuMDBkZAIGDw8WAh8FBQxJTkUxMDBBMDEwMTBkZAIHDw8WAh8FBQ1BZ3JvY2hlbWljYWxzZGQCCA8PFgIfBQUGRXF1aXR5ZGQCGQ9kFhJmD2QWAmYPDxYEHwUFBjUwMDAyOB8GBU9odHRwczovL3d3dy5ic2VpbmRpYS5jb20vc3RvY2stc2hhcmUtcHJpY2UvYXR2LXByb2plY3RzLWluZGlhLWx0ZC9hdHZwci81MDAwMjgvZGQCAQ8PFgIfBQUFQVRWUFJkZAICDw8WAh8FBRdBVFYgUFJPSkVDVFMgSU5ESUEgTFRELmRkAgMPDxYCHwUFBkFjdGl2ZWRkAgQPDxYCHwUFAlhUZGQCBQ8PFgIfBQUFMTAuMDBkZAIGDw8WAh8FBQxJTkU0NDdBMDEwMTVkZAIHDw8WAh8FBR5Db25zdHJ1Y3Rpb24gJmFtcDsgRW5naW5lZXJpbmdkZAIIDw8WAh8FBQZFcXVpdHlkZAIaD2QWEmYPZBYCZg8PFgQfBQUGNTAwMDI5HwYFUmh0dHBzOi8vd3d3LmJzZWluZGlhLmNvbS9zdG9jay1zaGFyZS1wcmljZS9hdXRvbGl0ZS0oaW5kaWEpLWx0ZC9hdXRvbGl0aW5kLzUwMDAyOS9kZAIBDw8WAh8FBQpBVVRPTElUSU5EZGQCAg8PFgIfBQUVQVVUT0xJVEUgKElORElBKSBMVEQuZGQCAw8PFgIfBQUGQWN0aXZlZGQCBA8PFgIfBQUCQiBkZAIFDw8WAh8FBQUxMC4wMGRkAgYPDxYCHwUFDElORTQ0OEEwMTAxM2RkAgcPDxYCHwUFGkF1dG8gUGFydHMgJmFtcDsgRXF1aXBtZW50ZGQCCA8PFgIfBQUGRXF1aXR5ZGQCGw8PFgIfAGhkZAIVDw8WAh8FZWRkGAIFHl9fQ29udHJvbHNSZXF1aXJlUG9zdEJhY2tLZXlfXxYBBSNjdGwwMCRDb250ZW50UGxhY2VIb2xkZXIxJGJ0blN1Ym1pdAUgY3RsMDAkQ29udGVudFBsYWNlSG9sZGVyMSRndkRhdGEPPCsACgEIAsUCZMIhLM8upD/lNYp+TH46i10nOnVe'),
    (r'__VIEWSTATEGENERATOR', r'CF507786'),
    (r'__EVENTVALIDATION', r'/wEWoAEC3ti5pwUC/J6elwMCvuzHng4C2MiawQwC/c+kowMCwozr0wYCguj9yA0CxZa2wg8C2fPMrAICz5CzgA4C7vvawAIC0L+KiQsC64z9gQkC+/CRlAoChNPKtAcChdPKtAcCgNPKtAcCgdPKtAcCgdP+qQcCgtP+qQcCvNPKtAcCvNPyqQcCvNOKqQcCuNPKtAcCuNO6qQcCq9PKtAcCt9PKtAcCstPKtAcCo9PKtAcCo9P6qQcCo9O6qQcCrdPKtAcCrdOKqQcCwtWLxAYC86qnhgkCz6iQBgLJ/K+YAQLe5v3wCwKZnauOCwL2v+XKCAKQwrb9CAKb1K9YAtS6iOcPAreDz4AKAp3hwOkPAofZt5QOArXz4zMCjpLv+w4Cl/DsowEC+tDwHAKBq6niCgLp1rCjDgLgx90uAuyQh+EMAuPl+LMFAumO8OUFAq/H2csOAuTIuC8Cy8XB+wMCiI7uqAcCuZL10AMCpe6p6gQC9P3VowcC8MPVwgkCl7SxwgUC86bz6wcCh+mM4wICws7tlQQCzoSDiwsCkNPC9gcC75/d2AcC/OrjrgMCgfyOoQsChI6V6AMCv96B5wcClZrK0gECiJmtrAICqN6CtwgChLru9Q0CmZGfTwK/q/T8CwLy7+/VAwL+/tvYBAL938DSDgKa/c/BDwLGv934DwLGm9GzDwLe6tq+AQKs87CCCgKKmIWsBwLFyrOxCQKk84r9DALXkf++BgLuiJPUCgLw9ve4BQKrx4ZYAtbMj9AFArSknokEArL3m+YMAuqjv+IDApD1geEEAoi5tMYOAqypkJgNAq2b2OcNAr+NqeADAsfE5qsJApj+rscHAqyzlM4PAtu814UDAv/7ybUOAvmEi8EJAtug4RcC4MPX3AcCnI+KqAkCgLWRvAsCn/vbtAQC2u7VqgYC2YTV4gsC0PHs5AUC7O/fvwcCwfLMzAECreiY0goCoanivQ4ClrbhvgUC4+3WhA4CmqTlngwC3IrJ8gcCgbysigwCl+KutgkC76unuAoCxqej+w0Cg+uNxwYC4eOmxg8CvsPC1AkCzOKfHgKZ8cKjAgKvo5LlBgL/xfzlBQKzt/GMCgKg28mJBAK+/OrKCAKOy4jsAgK+1LvHDALZw8mZDQKexp/DBgKHh5bTAgK6yIO4AwKYjo78DALii73uBgLgyaPHBALHzOy1AQLGktX/BQLkwryIBgLSj9eiDgKux/WfCALZg5j4DwLBos3gAgLM0+WgCwKou6DgDAL40JWiCjtNkNzRyrEBgXZcZC8MmOfMLUaP'),
    #(r'__EVENTVALIDATION', r'/wEWuAECpNDWvA4C/J6elwMC5eOC0AICvuzHng4C2MiawQwC/c+kowMCwozr0wYCguj9yA0CxZa2wg8C2fPMrAICz5CzgA4C7vvawAIC0L+KiQsC64z9gQkC+/CRlAoChNPKtAcChdPKtAcCgNPKtAcCgdPKtAcCgdP+qQcCgtP+qQcCvNPKtAcCvNPyqQcCvNOKqQcCuNPKtAcCuNO6qQcCq9PKtAcCt9PKtAcCstPKtAcCo9PKtAcCo9P6qQcCo9O6qQcCrdPKtAcCrdOKqQcCwtWLxAYC4pn6iQcC86qnhgkCz6iQBgLJ/K+YAQLe5v3wCwKZnauOCwL2v+XKCAKQwrb9CAKb1K9YAtS6iOcPAreDz4AKAp3hwOkPAofZt5QOArXz4zMCjpLv+w4Cl/DsowEC+tDwHAKBq6niCgLp1rCjDgLgx90uAuyQh+EMAuPl+LMFAumO8OUFAq/H2csOAuTIuC8Cy8XB+wMCiI7uqAcCuZL10AMCpe6p6gQC9P3VowcC8MPVwgkCl7SxwgUC86bz6wcCh+mM4wICws7tlQQCzoSDiwsCkNPC9gcC75/d2AcC/OrjrgMCgfyOoQsChI6V6AMCv96B5wcClZrK0gECiJmtrAICqN6CtwgChLru9Q0CmZGfTwK/q/T8CwLy7+/VAwL+/tvYBAL938DSDgKa/c/BDwLGv934DwLGm9GzDwLe6tq+AQKs87CCCgKKmIWsBwLFyrOxCQKk84r9DALXkf++BgLuiJPUCgLw9ve4BQKrx4ZYAtbMj9AFArSknokEArL3m+YMAuqjv+IDApD1geEEAoi5tMYOAqypkJgNAq2b2OcNAr+NqeADAsfE5qsJApj+rscHAqyzlM4PAtu814UDAv/7ybUOAvmEi8EJAtug4RcC4MPX3AcCnI+KqAkCgLWRvAsCn/vbtAQC2u7VqgYC2YTV4gsC0PHs5AUC7O/fvwcCwfLMzAECreiY0goCoanivQ4ClrbhvgUC4+3WhA4CmqTlngwC3IrJ8gcCgbysigwCl+KutgkC76unuAoCxqej+w0Cg+uNxwYC4eOmxg8CvsPC1AkCzOKfHgKZ8cKjAgKvo5LlBgL/xfzlBQKzt/GMCgKg28mJBAK+/OrKCAKOy4jsAgK+1LvHDALZw8mZDQKexp/DBgKHh5bTAgK6yIO4AwKYjo78DALii73uBgLgyaPHBALHzOy1AQLGktX/BQLkwryIBgLSj9eiDgKux/WfCALZg5j4DwLBos3gAgLM0+WgCwKou6DgDAL40JWiCgKN+tDQCAKN+qzQCAKN+rjQCAKN+rTQCAKN+qDQCAKN+rzQCAKN+ojQCAKN+oTQCALj8ODgCQKI2cKdDAKR47WVDgKN+tDQCAKN+qzQCAKN+rjQCAKN+rTQCAKN+qDQCAKN+rzQCAKN+ojQCAKN+oTQCALj8ODgCQKI2cKdDAKR47WVDhwwzVTPxyY0sGELSzNjh720OBvF'),
    (r'myDestination', r'#'),
    (r'WINDOW_NAMER', r'1'),
    (r'ctl00$ContentPlaceHolder1$hdnCode', ''),
    (r'ctl00$ContentPlaceHolder1$ddSegment', 'Segment'),
    (r'ctl00$ContentPlaceHolder1$ddlStatus', 'Select'),
    (r'ctl00$ContentPlaceHolder1$getTExtData', ''),
    (r'ctl00$ContentPlaceHolder1$ddlGroup', 'Select'),
    (r'ctl00$ContentPlaceHolder1$ddlIndustry', 'Select')
    )
con = psycopg2.connect("dbname='portfolio_insights' user='admin' host='127.0.0.1' port='5433' password='admin'")
cur = con.cursor()
new_stock_insert_query='INSERT INTO stock_list_bse("security_code", "security_id", "security_name", "status", "security_group", "face_value", "isin_no", "industry", "instrument") VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s);'
existring_stock_update_query='''UPDATE stock_list_bse SET "security_name" = %s, "status" = %s, "security_group" = %s, "face_value" = %s, "isin_no" = %s, "industry"  = %s, "instrument" = %s
WHERE "security_id"= %s'''
market_segments=open(os.path.join("data","segment.txt"),"r")
#outFile="F:\\VIDEOS\\python1\\New folder\\bse_stocklist_segmentwise.csv"
#if (os.path.exists(outFile)):
#    os.remove(outFile)
for segment in market_segments:
    #print('**************************** Segemnt value %s ***********',segment)
    segment=segment.replace('\n','')
    modify_formFields=list(formFields)
    form_segment='(r\'ctl00$ContentPlaceHolder1$ddSegment\', r\''+segment+'\')'
    #print(form_segment)
    modify_formFields[8]=literal_eval(form_segment)
    #form_security_name='(r\'ctl00$ContentPlaceHolder1$getTExtData\', r\'955670\')'
    #modify_formFields[10]=literal_eval(form_security_name)
    #print(modify_formFields)
    formFields=tuple(modify_formFields)
    #print(formFields)
    data = urllib.parse.urlencode(formFields).encode("utf-8")
    req=urllib.request.Request(uri,data,headers)
    res=urllib.request.urlopen(req)
    print(res.status);
    #page_data_str=res.read().decode('utf-8')
    #print(page_data_str)
    set_existing_stocks=set()
    cur.execute('SELECT "security_code" FROM stock_list_bse;')
    present_stock_list=cur.fetchall()
    for stocks in present_stock_list:
        print(stocks[0])
        set_existing_stocks.add(int(stocks[0]))
    for line in res:
        print(line);
        stock_data1=line.decode('utf-8').replace('\n','')
        stock_data=stock_data1.replace('\r','')
        if 'Security Code,Security Id,Security Name,Status,Group,Face Value,ISIN No,Industry,Instrument' not in stock_data:
            print('stock data **'+stock_data)
            security_code,security_id,security_name,status,security_group,face_value,isin_no,industry,instrument=stock_data.split(',')
            #print(stock_data)
            security_code_int=int(security_code)
            if face_value=="":
                face_value_float=face_value
            else:
                face_value_float=float(face_value)
            if security_code_int not in set_existing_stocks:
                #print(security_code_int)
                new_stock_data =(security_code_int,security_id,security_name,status,security_group or None,face_value_float or None,ISIN_No or None,industry or None,instrument)
                cur.execute(new_stock_insert_query, new_stock_data)
                #print('Insert** ',new_stock_data)
                set_existing_stocks.add(security_code_int)
                #print(stock_data)
            else:
                existing_stock_update_data=(security_name,status,security_group or None,face_value_float or None,ISIN_No or None,industry or None,instrument,security_id)
                cur.execute(existring_stock_update_query, existing_stock_update_data)
                #print('update** ' , existing_stock_update_data)
    #print(page_data_str)
    #text_file = open(outFile, "a")
    #text_file.writelines(page_data_str)
    #text_file.close()
con.commit()
cur.close()
con.close()
exit(1);
